{"0": {
    "doc": "All Input Controls",
    "title": "List of all Input Controls",
    "content": "The input controls plugin enables you with different set of UI components to render input controls in your web application. You may want to use a specific UI component for a specific input control type. This guide will help you understand how to use different UI components for specific input control types. ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#list-of-all-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#list-of-all-input-controls"
  },"1": {
    "doc": "All Input Controls",
    "title": "Boolean input controls",
    "content": "For boolean input controls, you can use the Checkbox or the Switch component. As mentioned in the Input Controls guide, you could use the Checkbox for rendering boolean input controls, however, you might want to use the Switch component instead. Switch component . To define a switch component, you have to provide the param like this: . { bool: { type: \"switch\" } } . Checkbox component . To define a checkbox component, you have to provide the param like this: . { bool: { type: \"checkbox\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#boolean-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#boolean-input-controls"
  },"2": {
    "doc": "All Input Controls",
    "title": "Text input controls",
    "content": "For text input controls, you can use the textField component. Depending on the metadata defined for your text input control, all proper validations will be applied to it automatically. E.g. assume you have defined the input control as mandatory, then the input control will be invalid in case the user leaves it empty. So far only 1 style has been defined for this component, so you could ignore passing any attribute to this input control. However, the full configuration is: . { singleValueText: { type: \"textField\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#text-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#text-input-controls"
  },"3": {
    "doc": "All Input Controls",
    "title": "Number input controls",
    "content": "For number input controls, you can use the number component. Depending on the metadata defined for your number input control, all proper validations will be applied to it automatically. It will behave similarly to the text field input control, but it also validates the value written in this input control is a number format. So far only 1 style has been defined for this component, so you could ignore passing any attribute to this input control. However, the full configuration is: . { singleValueNumber: { type: \"number\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#number-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#number-input-controls"
  },"4": {
    "doc": "All Input Controls",
    "title": "Date input controls",
    "content": "For date input controls, you can use the date component. All proper validations will be applied automatically depending on the metadata defined for your date input control. E.g. assume you have defined a min date and a max date (range of dates) as valid values, then this input control will enable only that range date. Additionally, you could either provide a default style (JRS look alike) or a material style (from MUI). JRS look alike component . To define a date component with JRS look alike, you have to provide the configuration like this: . { singleValueDate: { type: \"default\" } } . Note: By default, this is the style that will be used if you don’t provide any configuration. Material component . To define a date component with Material look alike, you have to provide the configuration like this: . { singleValueDate: { type: \"material\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#date-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#date-input-controls"
  },"5": {
    "doc": "All Input Controls",
    "title": "Date time input controls",
    "content": "For date time input controls, you can use the datetime component. All proper validations will be applied automatically depending on the metadata defined for your datetime input control. E.g. assume you have defined a min datetime and a max datetime (range of dates) as valid values, then this input control will enable only that range date. Additionally, you could either provide a default style (JRS look alike) or a material style (from MUI). JRS look alike component . To define a date time component with JRS look alike, you have to provide the configuration like this: . { singleValueDatetime: { type: \"default\" } } . Note: By default, this is the style that will be used if you don’t provide any configuration. Material component . To define a date time component with Material look alike, you have to provide the configuration like this: . { singleValueDatetime: { type: \"material\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#date-time-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#date-time-input-controls"
  },"6": {
    "doc": "All Input Controls",
    "title": "Time input controls",
    "content": "For time input controls, you can use the time component. All proper validations will be applied automatically depending on the metadata defined for your time input control. E.g. assume you have defined a min time and a max time (range of times) as valid values, then this input control will enable only that range time. Additionally, you could either provide a default style (JRS look alike) or a material style (from MUI). JRS look alike component . To define a time component with JRS look alike, you have to provide the configuration like this: . { singleValueTime: { type: \"default\" } } . Note: By default, this is the style that will be used if you don’t provide any configuration. Material component . To define a time component with Material look alike, you have to provide the configuration like this: . { singleValueTime: { type: \"material\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#time-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#time-input-controls"
  },"7": {
    "doc": "All Input Controls",
    "title": "Single select input controls",
    "content": "All proper validations will be applied automatically depending on the metadata defined for your single select input control. E.g. assume you have defined a list of values as valid values, then this input control will enable only that list of values. Currently, there is no additional configurations for this input control. However, it is listed as one possible input control option. ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#single-select-input-controls",
    "relUrl": "/pages/input-controls/all-ics.html#single-select-input-controls"
  },"8": {
    "doc": "All Input Controls",
    "title": "All Input Controls",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html",
    "relUrl": "/pages/input-controls/all-ics.html"
  },"9": {
    "doc": "Architecture",
    "title": "Components",
    "content": "The Visualize Components toolkit is composed of several components: . | jv-tools . The jv-tools package provides utility methods for interacting with JRS to obtain visualize scripts. Additionally this package exports types for the visualize.js API for typescript developers to make type-based inferences while coding for visualize . | jv-input-controls . The jv-input-controls package provides users the ability to work with a report or ad hoc view’s input controls. The user can supply a URI to the resource, and this package can render the controls, allow for user input, provide validation, and interact with other components as the values are changed. | jv-scheduler . The jv-scheduler package provides users with the ability to render the work flow for viewing, editing and creating scheduled tasks. | . ",
    "url": "/js-visualize-components-samples/pages/architecture.html#components",
    "relUrl": "/pages/architecture.html#components"
  },"10": {
    "doc": "Architecture",
    "title": "Applications",
    "content": "The toolkit is intended to be used in existing applications, or to construct a new application composed of these components. ",
    "url": "/js-visualize-components-samples/pages/architecture.html#applications",
    "relUrl": "/pages/architecture.html#applications"
  },"11": {
    "doc": "Architecture",
    "title": "Architecture",
    "content": "This page is meant to give users an understanding of the components available in this repository. ",
    "url": "/js-visualize-components-samples/pages/architecture.html",
    "relUrl": "/pages/architecture.html"
  },"12": {
    "doc": "Basic Usage",
    "title": "Basic example",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#basic-example",
    "relUrl": "/pages/input-controls/basic-usage.html#basic-example"
  },"13": {
    "doc": "Basic Usage",
    "title": "Load visualize.js",
    "content": ". | Import the visualizejsLoader function from the @jaspersoft/jv-tools package. import { Authentication, VisualizeFactory, visualizejsLoader, VisualizeType, } from \"@jaspersoft/jv-tools\"; . | Provide the visualizejsLoader a valid URL from where the visualize library should be downloaded. | In case you don’t provide a URL because the visualize.js is already loaded into the window object, then this package will automatically take it from there. | If you provide a valid URL, this method will add a new script tag in your app’s document referencing the URL you provided, making the visualize.js library available for your app. | visualizejsLoader is a promise so you must execute it and it will return the visualize object (VisualizeFactory). Make sure to store this reference in your app because it will be needed later for logging in the user to JRS. | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#load-visualizejs",
    "relUrl": "/pages/input-controls/basic-usage.html#load-visualizejs"
  },"14": {
    "doc": "Basic Usage",
    "title": "Authentication",
    "content": ". | Now that the visualize.js library is loaded in your app, you must authenticate with Jasperreports Server. | Use the object returned by the visualizejsLoader (VisualizeFactory) to execute the auth method from visualize.js. As this is a promise, handling the success and error cases is an exercise for the user. | Example authentication object: | . { auth: { name: \"joeuser\", password: \"joeuser\", organization: \"organization_1\", locale: \"en_US\", }, } . | After authenticating the visualize.js object (“V object”) is returned. This is used to interact with the internal API of visualize.js. Store a reference to this object in a global scope to perform other operations with visualize.js such as loading a report viewer. | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#authentication",
    "relUrl": "/pages/input-controls/basic-usage.html#authentication"
  },"15": {
    "doc": "Basic Usage",
    "title": "Preparing Input Control Component",
    "content": "To use the Input Control component, you can instantiate it and provide visualize.js’s v object to enable it to access JRS. const inputControlComponent = new InputControls(v); . Now you can interact with the component’s javascript api as described in the following sections. ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#preparing-input-control-component",
    "relUrl": "/pages/input-controls/basic-usage.html#preparing-input-control-component"
  },"16": {
    "doc": "Basic Usage",
    "title": "Rendering the control panel",
    "content": "InputControls component has a method renderControlPanel that accepts 3 parameters: uri, container, panel configuration. | uri: (string) path to report or ad hoc view (/path/to/my/reports/SalesReport) | container: (DivElement) &lt;div&gt; element from the DOM where the input controls should be rendered | panel configuration: (JSON) object containing configuration for panel look and feel and event handling { success?: () =&gt; void; error?: (error: any) =&gt; void; config?: InputControlUserConfig; events?: { change?: ( ic: { [key: string]: any[] }, validationResult: { [key: string]: string } | boolean, ) =&gt; void; }; } . | For more information about the config parameter, refer to this section | success?: () =&gt; void. This method will be triggered only once after the input controls are rendered correctly in the HTML element container provided. | error?: (error: any) =&gt; void. This method will be triggered if and only if, there is an error while either fetching the input controls or when rendering the input controls in the HTML element container. The most common error case is likely to happen when providing an HTML container that is not visible in the HTML tree. | config?. This parameter will help to define the styles of the input controls. Refer to the next section for more info about the structure. | events?. More information can be found at Events | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#rendering-the-control-panel",
    "relUrl": "/pages/input-controls/basic-usage.html#rendering-the-control-panel"
  },"17": {
    "doc": "Basic Usage",
    "title": "Configuration of the input controls",
    "content": "Each and every input control could be defined by the user in the config parameter. This parameter is a wrapper that allows the user to define the type of component to render, receive any modification done by the user in the UI, and receive (if any) information about the validity of the values the user could have typed in any of the input controls. The config parameter has the following structure: . { bool?: { type: \"switch\" | \"checkbox\"; }; singleValueText?: { type: \"textField\"; }; singleValueNumber?: { type: \"number\"; }; singleValueDate?: { type: \"default\" | \"material\"; }; singleValueDatetime?: { type: \"default\" | \"material\"; }; singleValueTime?: { type: \"default\" | \"material\"; }; } . If you want to see more information about the different types of components for the input controls, refer to this guide. ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#configuration-of-the-input-controls",
    "relUrl": "/pages/input-controls/basic-usage.html#configuration-of-the-input-controls"
  },"18": {
    "doc": "Basic Usage",
    "title": "Basic Usage",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html",
    "relUrl": "/pages/input-controls/basic-usage.html"
  },"19": {
    "doc": "Events",
    "title": "Events",
    "content": "In order to work with user input, you may provide a callback function which is called when certain events occur. Currently we only support change events. When configuring the input controls component, you may provide a JSON object in the events property of your configuration object. See Input Controls for more information on configuring the input controls component. In read-only scenarios where you do not wish to process user input, you may omit this configuration. events?: { change?: ( ic: { [key: string]: any[] }, validationResult: { [key: string]: string } | boolean, ) =&gt; void; }; . ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html",
    "relUrl": "/pages/input-controls/events.html"
  },"20": {
    "doc": "Events",
    "title": "Parameters",
    "content": "The events.change property accepts a callback which is given the following parameters when called: . | ic: contains a representation of all the input controls that are being rendered in the HTML element container. The format of the object matches the format used by visualize.js when working with input controls. Keys are input control IDs and values are an array of values. For example: { \"column_boolean_1\": [false], \"column_string_1\": [\"string value\"], \"column_date_1\": [\"2009-09-12\"], \"column_time_1\": [\"23:44:21\"], \"column_timestamp_1\": [\"2014-09-12T15:46:18\"], \"id_1\": [\"1\"], \"column_float_1\": [\"0.33\"] } . | validationResult: contains any validation errors that may be present. The keys of this object represent the input control IDs while the value will either be an empty array when no validation errors occur, or a string value with a user-readable message regarding the validation failure. When all controls have valid input, this parameter will be a boolean value: false. | . For example: . { \"column_time_1\": [], \"column_timestamp_1\": \"Verify the date is before or exactly 2014-09-11T15:00:00.\", } . Notes . | In case all values for all input controls are valid, the param validationResult will be a boolean value false. | This is an event that is being triggered by the InputControl class. This is because the InputControl class is a controlled component. This means that the InputControl class will handle the state of the input controls and will update the state of the input controls when the user interacts with them. This is why the InputControl class will trigger the change event every time the state of the input controls changes. | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html#parameters",
    "relUrl": "/pages/input-controls/events.html#parameters"
  },"21": {
    "doc": "Events",
    "title": "Handling validations",
    "content": "To handle validations on the developer side, you have to use the events.change method when calling the renderControlPanel. This method will return a second parameter that contains all validations. E.g.: . plugin.renderControlPanel( '/My/URI', document.getElementById(\"my-container\"), { events: { change: (ics, validationResult) =&gt; { console.log(\"ics =&gt; \", ics); console.log(\"validationResult =&gt; \", validationResult); } } } ) . What to expect in case the input control is invalid . For every change that happens in the input control, the events.change method will be executed. Suppose you have defined a mandatory text input control. This means the input control must have a value. Let’s assume the user has not entered any value in the input control. In this case, the validationResult will contain: . {\"id_1\": \"Specify a valid value for type number.\"} . where: . | id_1: is the id of the input control | Specify a valid value for type number: is the message that is displayed in the UI. | . In case all values for all input controls are valid, the param validationResult will be a boolean value false. ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html#handling-validations",
    "relUrl": "/pages/input-controls/events.html#handling-validations"
  },"22": {
    "doc": "Events",
    "title": "Handling errors",
    "content": "To handle errors, you can use the error property when calling the renderControlPanel method. This method will return an error object when trying to render the input controls, in case of an error. E.g.: . plugin.renderControlPanel( '/My/URI', document.getElementById(\"my-container\"), { error: (error) =&gt; { console.log(\"error =&gt; \", error); } } ) . When the container provided is not visible . A possible situation is when the container provided is not visible. In this case, the error object will contain: . { \"message\": \"createRoot(...): Target container is not a DOM element\" } . When the report URL is not found in the JRS server. Another possible situation is when the report URL is not found in the JRS server. In this case, the error object will contain: . { \"message\": \"Resource URI:&lt;URI_of_the_report&gt; Type:com.jaspersoft.jasperserver.api.metadata.common.domain.InputControlsContainer not found.\", \"errorCode\": \"resource.not.found\", \"parameters\": [ \"URI:&lt;URI_of_the_report&gt; Type:com.jaspersoft.jasperserver.api.metadata.common.domain.InputControlsContainer\" ] } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html#handling-errors",
    "relUrl": "/pages/input-controls/events.html#handling-errors"
  },"23": {
    "doc": "Input Controls",
    "title": "Input Controls",
    "content": "The Input Controls plugin is a set of components that allows you to render input controls in your web application. The plugin is built on top of the Visualize.js API and is used to interact with JasperReport Server reports and visualizations. ",
    "url": "/js-visualize-components-samples/pages/input-controls/",
    "relUrl": "/pages/input-controls/"
  },"24": {
    "doc": "Home",
    "title": "Visualize.js Component Toolkit",
    "content": "Learn how to use the visualize.js component toolkit to enrich your web application. Harness the power of Jasperreports server utilizing modern ReactJS-based components to embed your reporting in an existing application, or to construct your own reporting workflows composed of components built from common use cases. ",
    "url": "/js-visualize-components-samples/#visualizejs-component-toolkit",
    "relUrl": "/#visualizejs-component-toolkit"
  },"25": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/js-visualize-components-samples/",
    "relUrl": "/"
  },"26": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "JS Visualize Components is a toolkit of React components that work in conjunction with visualize.js to provide web developers rich, modern UI components that interact with their existing JRS installation. By utilizing these components web developers can forge their own user experience utilizing the reporting concepts found in JRS. ",
    "url": "/js-visualize-components-samples/pages/introduction.html",
    "relUrl": "/pages/introduction.html"
  },"27": {
    "doc": "Introduction",
    "title": "About Visualize Components Toolkit",
    "content": "The aim of this project is to provide components that are ready-to-use, modern, customizable, accessible and open source. ",
    "url": "/js-visualize-components-samples/pages/introduction.html#about-visualize-components-toolkit",
    "relUrl": "/pages/introduction.html#about-visualize-components-toolkit"
  },"28": {
    "doc": "Introduction",
    "title": "Requirements",
    "content": "In order to utilize this library, you will need access to a running instance of Jasperreports Server (version &gt;= 8.0) configured to provide visualize.js. You can utilize these packages in your existing ReactJS project, or utilize them in another framework. ",
    "url": "/js-visualize-components-samples/pages/introduction.html#requirements",
    "relUrl": "/pages/introduction.html#requirements"
  },"29": {
    "doc": "Introduction",
    "title": "Installation",
    "content": "Installation of packages can be done with either npm or yarn, as you see fit for your project. Packages are hosted on the public npm registry, and should be available without any additional configurations. Packages are organized under the @jaspersoft scope. &gt; npm install --save @jaspersoft/jv-tools &gt; npm install --save @jaspersoft/jv-input-controls . ",
    "url": "/js-visualize-components-samples/pages/introduction.html#installation",
    "relUrl": "/pages/introduction.html#installation"
  },"30": {
    "doc": "Introduction",
    "title": "Getting Started",
    "content": "You need to have access to visualize.js on the pages where these components will be used. To do this you can include it using a script tag or utilize the jv-tools package to load the script programatically. ",
    "url": "/js-visualize-components-samples/pages/introduction.html#getting-started",
    "relUrl": "/pages/introduction.html#getting-started"
  },"31": {
    "doc": "jv-tools",
    "title": "jv-tools Package",
    "content": "The jv-tools package is a collection of utility functions for working with the component toolkit. Currently this is the home of two important pieces: a loader and typescript interfaces for working with visualize in your IDE. ",
    "url": "/js-visualize-components-samples/pages/tools/jv-tools.html#jv-tools-package",
    "relUrl": "/pages/tools/jv-tools.html#jv-tools-package"
  },"32": {
    "doc": "jv-tools",
    "title": "Installation",
    "content": "Installing the jv-tools package can be done with your package tool, npm or yarn . npm install @jaspersoft/jv-tools or yarn add @jaspersoft/jv-tools . visualizeJsLoader . The main utility you will use from jv-tools is the visualizeJsLoader function. This function allows you to load visualize from a provided URL. It will then create a script tag to load the script, making it available to work with in code. Optionally you can maintain loading of visualize on your own and allowing it to be set on the global scope, if this is done visualizeJsLoader will return the one from global scope instead of loading a new one. Authentication . To authenticate to your JRS server, you must provide credentials, you can do this with an Authentication object. { auth: { name: \"joeuser\", password: \"joeuser\", organization: \"organization_1\", locale: \"en_US\", }, } . Parameters . | name - username for the JRS server where the visualize.js script will be loaded from | password - password for the JRS server where the visualize.js script will be loaded from | organization - (optional) organization for the user | locale - (optional) user locale to use | . ",
    "url": "/js-visualize-components-samples/pages/tools/jv-tools.html#installation",
    "relUrl": "/pages/tools/jv-tools.html#installation"
  },"33": {
    "doc": "jv-tools",
    "title": "jv-tools",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/tools/jv-tools.html",
    "relUrl": "/pages/tools/jv-tools.html"
  },"34": {
    "doc": "Loading visualize.js",
    "title": "Loading visualize.js",
    "content": "Loading visualize.js . This function works in a browser environment (assumes access to DOM), by dynamically inserting a script tag to load visualize.js. In your own code, when initializing your page, you can use this utility method to more easily load and store as you wish the visualize.js object. Alternatively, if you are already including visulize using a script tag on the page, it will be stored in a global scope and will simply be returned by this function. In a react based application, you can use the useEffect hook to handle this as in the example below. const credentials: Authentication = { name: \"joeuser\", password: \"joeuser\", organization: \"organization_1\", }; const [visualizeFactoryContainer, setVisualizeFactoryContainer] = useState( null as { viz: VisualizeFactory } | null, ); const [vContainer, setVContainer] = useState( null as { v: VisualizeType } | null, ); const [plugin, setPlugin] = useState&lt;InputControls&gt;(); useEffect(() =&gt; { const loadVisualize = visualizejsLoader(visualizeUrl); loadVisualize().then((visualizeFactory: VisualizeFactory) =&gt; { setVisualizeFactoryContainer({ viz: visualizeFactory }); }); }, []); useEffect(() =&gt; { if (credentials &amp;&amp; visualizeFactoryContainer) { new Promise&lt;VisualizeType&gt;((resolve, reject) =&gt; { visualizeFactoryContainer.viz( { auth: { name: credentials.name, password: credentials.password, organization: credentials.organization || null, locale: \"en_US\", }, }, resolve, reject, ); }) .then((v: VisualizeType) =&gt; { setVContainer({ v }); }) .catch((e: any) =&gt; { console.log(String(e)); }); } }, [visualizeFactoryContainer]); useEffect(() =&gt; { vContainer &amp;&amp; setPlugin(new InputControls(vContainer.v)); }, [vContainer]); . In this sample, we eventually set vContainer which has one property, v, containing what is called the V Object, which can be used across several of the visualize components. ",
    "url": "/js-visualize-components-samples/pages/tools/loading-vizjs.html",
    "relUrl": "/pages/tools/loading-vizjs.html"
  },"35": {
    "doc": "Override Styles",
    "title": "Overriding default styles",
    "content": "Currently, all input controls are shipped with default styles. These default styles are applied to the input controls when they are rendered in the HTML element container. In order to prevent any conflicts with your app’s styles, the input control styles have been scoped to the input control container by using a prefix class. The prefix class is jv-. ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html#overriding-default-styles",
    "relUrl": "/pages/input-controls/override-styles.html#overriding-default-styles"
  },"36": {
    "doc": "Override Styles",
    "title": "The default styles",
    "content": "The package @jaspersoft/jv-ui-components provides a stylesheet that contains the default styles for the input controls. This file can be located in the following path: node_modules/@jaspersoft/jv-ui-components/dist/jv-ui.css. By default, it is imported in the sample app’s index.html file. E.g: . &lt;link rel=\"stylesheet\" href=\"jv-ui.css\" type=\"text/css\" /&gt; . You can choose not to import it at all, or you can import it and override the styles as needed. ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html#the-default-styles",
    "relUrl": "/pages/input-controls/override-styles.html#the-default-styles"
  },"37": {
    "doc": "Override Styles",
    "title": "How to overwrite the default styles",
    "content": "Consider the following code that is rendered when using a checkbox component for a boolean input control: . &lt;div class=\"jv-mInput jv-mInputSwitch jv-mInputInline jv-mInputLarge mui\"&gt; &lt;label class=\"jv-MuiFormControlLabel-root jv-MuiFormControlLabel-labelPlacementEnd\"&gt; &lt;span class=\"jv-MuiSwitch-root jv-MuiSwitch-sizeMedium jv-mInput-switch mui\"&gt; &lt;span class=\"jv-PrivateSwitchBase-root jv-MuiSwitch-switchBase jv-MuiSwitch-colorPrimary Mui-checked\"&gt; &lt;input class=\"jv-PrivateSwitchBase-input jv-MuiSwitch-input\" type=\"checkbox\" checked=\"\"&gt; &lt;span class=\"jv-MuiSwitch-thumb\"&gt;&lt;/span&gt; &lt;span class=\"jv-MuiTouchRipple-root\"&gt;&lt;/span&gt; &lt;/span&gt; &lt;span class=\"jv-MuiSwitch-track\"&gt;&lt;/span&gt; &lt;/span&gt; &lt;span class=\"jv-MuiTypography-root jv-MuiFormControlLabel-label jv-mInput-label mui\"&gt;column_boolean&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; . The component that is being rendered contains the CSS rule: .jv-MuiSwitch-colorPrimary.Mui-checked + .jv-MuiSwitch-track which is in charge of the background color of the switch when it is checked. To override this style, you can add the following CSS to your app: .jv-MuiSwitch-colorPrimary.Mui-checked + .jv-MuiSwitch-track { background-color: red; } . Which will make the background color of the switch red when it is checked. ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html#how-to-overwrite-the-default-styles",
    "relUrl": "/pages/input-controls/override-styles.html#how-to-overwrite-the-default-styles"
  },"38": {
    "doc": "Override Styles",
    "title": "UI Components",
    "content": "All UI components are based on the material UI components v5. (Check the list of all available input controls here). As mentioned, every component has its own default styles. However, the stylesheet provided overrides the styling of the material UI components. In the end, you will never get the exact same look and feel as in MUI components, instead, you’ll get a version of those components with styling of our own. ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html#ui-components",
    "relUrl": "/pages/input-controls/override-styles.html#ui-components"
  },"39": {
    "doc": "Override Styles",
    "title": "Override Styles",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html",
    "relUrl": "/pages/input-controls/override-styles.html"
  },"40": {
    "doc": "Visualize Types in TypeScript",
    "title": "TypeScript Types",
    "content": "The jv-tools package also exports some types that can be used while writing TypeScript. Currently this is under development, but some types are availble for use now. ",
    "url": "/js-visualize-components-samples/pages/tools/visualize-types.html#typescript-types",
    "relUrl": "/pages/tools/visualize-types.html#typescript-types"
  },"41": {
    "doc": "Visualize Types in TypeScript",
    "title": "Using types in your project",
    "content": "The types are exported in the jv-tools package, and should be available in your IDE once you’ve added @jaspersoft/jv-tools as a dependency to your project. ",
    "url": "/js-visualize-components-samples/pages/tools/visualize-types.html#using-types-in-your-project",
    "relUrl": "/pages/tools/visualize-types.html#using-types-in-your-project"
  },"42": {
    "doc": "Visualize Types in TypeScript",
    "title": "Visualize Types in TypeScript",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/tools/visualize-types.html",
    "relUrl": "/pages/tools/visualize-types.html"
  }
}
