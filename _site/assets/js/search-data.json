{"0": {
    "doc": "All input controls",
    "title": "All input controls",
    "content": "The Input Controls component allows you to render input controls in your web application. This guide will help you understand how to use different UI components for specific input control types. ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html",
    "relUrl": "/pages/input-controls/all-ics.html"
  },"1": {
    "doc": "All input controls",
    "title": "Boolean",
    "content": "For boolean input controls, use the checkbox or the switch component. You can use the checkbox for rendering boolean input controls, however, you might want to use the switch component instead. Checkbox . To define a checkbox component, provide the param as follows: . { bool: { type: \"checkbox\" } } . Switch . To define a switch component, provide the param as follows: . { bool: { type: \"switch\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#boolean",
    "relUrl": "/pages/input-controls/all-ics.html#boolean"
  },"2": {
    "doc": "All input controls",
    "title": "Text",
    "content": "For text input controls, use the textField component. Depending on the metadata defined for your text input control, all proper validations will be applied to it automatically. For example, if you have defined the input control as mandatory, the input control will be invalid when the user leaves it empty. Only one style has been defined for this component, so you could ignore passing any attribute to this input control. However, the full configuration is: . { singleValueText: { type: \"textField\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#text",
    "relUrl": "/pages/input-controls/all-ics.html#text"
  },"3": {
    "doc": "All input controls",
    "title": "Number",
    "content": "For number input controls, use the number component. Depending on the metadata defined for your number input control, all proper validations will be applied to it automatically. The number input control functions similarly to a text field, but with built-in validation to ensure the entered value is a number. Only one style has been defined for this component, so you could ignore passing any attribute to this input control. However, the full configuration is: . { singleValueNumber: { type: \"number\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#number",
    "relUrl": "/pages/input-controls/all-ics.html#number"
  },"4": {
    "doc": "All input controls",
    "title": "Date",
    "content": "For date input controls, use the date component. All proper validations will be applied automatically depending on the metadata defined for your date input control. For example, when you have defined a min date and a max date (range of dates) as valid values, then this input control will enable only that range date. Additionally, you can keep the default Jaspersoft style of the date input or opt for Material UI styling. If you don’t provide any configuration the default styles will be used. Default styling . For a date component with default Jaspersoft styling, provide the following configuration: . { singleValueDate: { type: \"default\" } } . Material UI styling . For a date component with Material UI styling, provide the following configuration: . { singleValueDate: { type: \"material\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#date",
    "relUrl": "/pages/input-controls/all-ics.html#date"
  },"5": {
    "doc": "All input controls",
    "title": "Datetime",
    "content": "For datetime input controls, use the datetime component. All proper validations will be applied automatically depending on the metadata defined for your datetime input control. For example, when you have defined a min datetime and a max datetime (range of dates) as valid values, then this input control will enable only that range date. Additionally, you can keep the default Jaspersoft style of the date input or opt for Material UI styling. If you don’t provide any configuration the default styles will be used. Default styling . For a datetime component with default Jaspersoft styling, provide the following configuration: . { singleValueDatetime: { type: \"default\" } } . Material UI styling . For a datetime component with Material UI styling, provide the following configuration: . { singleValueDatetime: { type: \"material\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#datetime",
    "relUrl": "/pages/input-controls/all-ics.html#datetime"
  },"6": {
    "doc": "All input controls",
    "title": "Time",
    "content": "For time input controls, use the time component. All proper validations will be applied automatically depending on the metadata defined for your time input control. For example, when you have defined a min time and a max time (range of times) as valid values, then this input control will enable only that range time. Additionally, you can keep the default Jaspersoft style of the date input or opt for Material UI styling. If you don’t provide any configuration the default styles will be used. Default styling . For a time component with default Jaspersoft styling, provide the following configuration: . { singleValueTime: { type: \"default\" } } . Material UI styling . For a time component with Material UI styling, provide the following configuration: . { singleValueTime: { type: \"material\" } } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#time",
    "relUrl": "/pages/input-controls/all-ics.html#time"
  },"7": {
    "doc": "All input controls",
    "title": "Single select",
    "content": "All proper validations will be applied automatically depending on the metadata defined for your single select input control. For example, when you define a list of values as valid values, then this input control will enable only that list of values. There are currently no additional configurations for this input control. ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#single-select",
    "relUrl": "/pages/input-controls/all-ics.html#single-select"
  },"8": {
    "doc": "All input controls",
    "title": "Multi select",
    "content": "All proper validations will be applied automatically depending on the metadata defined for your multi select input control. For example, when you define a list of values as valid values, then this input control will enable only that list of values. There are currently no additional configurations for this input control. ",
    "url": "/js-visualize-components-samples/pages/input-controls/all-ics.html#multi-select",
    "relUrl": "/pages/input-controls/all-ics.html#multi-select"
  },"9": {
    "doc": "Architecture",
    "title": "Architecture",
    "content": "Jaspersoft Visualize Components repository contains several component packages. This page gives an overview of each component. jv-tools . The jv-tools package provides utility methods for interacting with JasperReports Server to obtain visualize scripts. Additionally, this package exports types for the Visualize.js API for TypeScript developers to make type-based inferences while coding for Visualize.js. jv-input-controls . The jv-input-controls package provides users the ability to work with a report or Ad Hoc view’s input controls. The user can supply a URI to the resource, and this package can render the controls, allow for user input, provide validation, and interact with other components as the values are changed. jv-scheduler . The jv-scheduler package provides users with the ability to render the workflow for viewing, editing, and creating scheduled tasks. ",
    "url": "/js-visualize-components-samples/pages/architecture.html",
    "relUrl": "/pages/architecture.html"
  },"10": {
    "doc": "Basic Usage",
    "title": "Basic usage",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/scheduler/basic-usage.html#basic-usage",
    "relUrl": "/pages/scheduler/basic-usage.html#basic-usage"
  },"11": {
    "doc": "Basic Usage",
    "title": "Changes in JasperReports Server",
    "content": ". | Navigate to Path_to_tomcat/webapps/jasperserver-pro/WEB-INF/applicationContext-security-pro-web.xml | Add the following entries to &lt;property name=\"allowedHeaders\"&gt; property: . | &lt;value&gt;Fetch-Csrf-Token&lt;/value&gt; | &lt;value&gt;Owasp_csrftoken&lt;/value&gt; | . | . ",
    "url": "/js-visualize-components-samples/pages/scheduler/basic-usage.html#changes-in-jasperreports-server",
    "relUrl": "/pages/scheduler/basic-usage.html#changes-in-jasperreports-server"
  },"12": {
    "doc": "Basic Usage",
    "title": "Configure the default styles",
    "content": "You have two options for configuring the import of default styles: . | In your main CSS file: @import \"@jaspersoft/jv-ui-components/dist/jv-ui.css\"; . | At the top of your main TypeScript or JavaScript file: import \"@jaspersoft/jv-ui-components/dist/jv-ui.css\"; . | . Additionally, you must add a configuration that enables you to use the default styles for the scheduler component only. When you use this configuration, the other styles in your application will not be affected by the Jaspersoft Visualize Components CSS. To add this configuration, import the following file: . import \"@jaspersoft/jv-ui-components/material-ui/JVMuiClassNameSetup\"; . Having this configuration enables you to use the default styles for the scheduler component. Also, it won’t affect the styles of your application, it will only affect the styles of the scheduler. ",
    "url": "/js-visualize-components-samples/pages/scheduler/basic-usage.html#configure-the-default-styles",
    "relUrl": "/pages/scheduler/basic-usage.html#configure-the-default-styles"
  },"13": {
    "doc": "Basic Usage",
    "title": "Load Visualize.js",
    "content": ". | Import the visualizejsLoader function from the @jaspersoft/jv-tools package. import { Authentication, VisualizeFactory, visualizejsLoader, VisualizeClient, } from \"@jaspersoft/jv-tools\"; . | Provide the visualizejsLoader a valid URL from where the Visualize.js library should be downloaded. | If you don’t provide a URL because Visualize.js is already loaded into the window object, then this package will automatically take it from there. | If you provide a valid URL, this method will add a new script tag in your application’s document referencing the URL you provided, making the Visualize.js library available for your application. | visualizejsLoader is a promise, so you must execute it and it will return the Visualize.js object (VisualizeFactory). Make sure to store this reference in your application because it will be needed later for logging in the user to JasperReports Server. | More details about this loading can be found at Loading Visualize.js. | . ",
    "url": "/js-visualize-components-samples/pages/scheduler/basic-usage.html#load-visualizejs",
    "relUrl": "/pages/scheduler/basic-usage.html#load-visualizejs"
  },"14": {
    "doc": "Basic Usage",
    "title": "Authentication",
    "content": ". | Now that the Visualize.js library is loaded in your application, you must authenticate with JasperReports Server. | Use the object returned by the visualizejsLoader (VisualizeFactory) to execute the auth method from Visualize.js. As this is a promise, handling the success and error cases is an exercise for the user. | Example authentication object: { auth: { name: \"joeuser\", password: \"joeuser\", organization: \"organization_1\", locale: \"en_US\", }, } . | After authenticating, the VisualizeClient object (or simply v object) is returned. This is used to interact with the internal API of Visualize.js. Store a reference to this object in a global scope to perform other operations with Visualize.js such as loading a report viewer. | . More info about the tools can be found in this guide. ",
    "url": "/js-visualize-components-samples/pages/scheduler/basic-usage.html#authentication",
    "relUrl": "/pages/scheduler/basic-usage.html#authentication"
  },"15": {
    "doc": "Basic Usage",
    "title": "Render the Scheduler plugin",
    "content": "The JavaScript approach . Import . import { renderScheduler, SchedulerConfig } from \"@jaspersoft/jv-scheduler\"; . Scheduler package provides a renderScheduler(container: HTMLElement, v: VisualizeClient, config: SchedulerConfigProps): void method. Parameters: . | container - (DivElement) &lt;div&gt; element from the DOM where the scheduler should be rendered | v - (VisualizeClient) visualization object | config - (SchedulerConfig) object containing configuration for scheduler look and feel and event handling. (reference) . | For more information about the scheduler configuration parameter, refer to the Configuration page | . The React approach . Import . import { Scheduler, SchedulerConfigProps } from \"@jaspersoft/jv-scheduler\"; . The package @jaspersoft/jv-scheduler provides a React component that uses the Scheduler methods to render the scheduler component in the UI. This component is called Scheduler and can be used as follows: . &lt;Scheduler schedulerUIConfig={schedulerUIConfig} visualize={visualize} /&gt; . The attributes the Scheduler component receives are very similar to what has been explained in the JavaScript approach. The only difference is that it isn’t needed to provide the HTML element because the React component will render the scheduler in the DOM. More info about the vContainer can be found in this guide. ",
    "url": "/js-visualize-components-samples/pages/scheduler/basic-usage.html#render-the-scheduler-plugin",
    "relUrl": "/pages/scheduler/basic-usage.html#render-the-scheduler-plugin"
  },"16": {
    "doc": "Basic Usage",
    "title": "Basic Usage",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/scheduler/basic-usage.html",
    "relUrl": "/pages/scheduler/basic-usage.html"
  },"17": {
    "doc": "Basic usage",
    "title": "Basic usage",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html",
    "relUrl": "/pages/input-controls/basic-usage.html"
  },"18": {
    "doc": "Basic usage",
    "title": "Configure the default styles",
    "content": "You have two options for configuring the import of default styles: . | In your main CSS file: @import \"@jaspersoft/jv-ui-components/dist/jv-ui.css\"; . | At the top of your main TypeScript or JavaScript file: import \"@jaspersoft/jv-ui-components/dist/jv-ui.css\"; . | . Additionally, you must add a configuration that enables you to use the default styles for the input controls components only. When you use this configuration, the other styles in your application will not be affected by the Jaspersoft Visualize Components CSS. To add this configuration, import the following file: . import \"@jaspersoft/jv-ui-components/material-ui/JVMuiClassNameSetup\"; . ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#configure-the-default-styles",
    "relUrl": "/pages/input-controls/basic-usage.html#configure-the-default-styles"
  },"19": {
    "doc": "Basic usage",
    "title": "Load Visualize.js",
    "content": ". | Import the visualizejsLoader function from the @jaspersoft/jv-tools package. import { Authentication, InputControlProperties, VisualizeClient, VisualizeFactory, visualizejsLoader, } from \"@jaspersoft/jv-tools\"; . | Provide the visualizejsLoader a valid URL from where the Visualize.js library should be downloaded. | If you don’t provide a URL because Visualize.js is already loaded into the window object, then this package will automatically take it from there. | When you provide a valid URL, this method will add a new script tag in your application’s document referencing the URL you provided, making the Visualize.js library available for your application. | visualizejsLoader is a promise, so you must execute it and it will return the VisualizeFactory. Make sure your store this reference in your application because it will be needed later for logging in the user to JRS. | More details about this loading can be found at: Loading visualize.js. | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#load-visualizejs",
    "relUrl": "/pages/input-controls/basic-usage.html#load-visualizejs"
  },"20": {
    "doc": "Basic usage",
    "title": "Authentication",
    "content": ". | Now that the Visualize.js library is loaded in your application, you must authenticate with JasperReports Server. | Use VisualizeFactory object returned by the visualizejsLoader to authenticate with JasperReports Server. As this is a promise, handling the success and error cases is an exercise for the user. | Example authentication object: { auth: { name: \"joeuser\", password: \"joeuser\", organization: \"organization_1\", locale: \"en_US\", }, } . | After authenticating, the VisualizeClient object (or simply v object) is returned. It is used to interact with the Visualize.js API. Store a reference to this object in a global scope of your application to perform other operations with Visualize.js, such as loading a report. | . More info about the tools can be found in this guide. ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#authentication",
    "relUrl": "/pages/input-controls/basic-usage.html#authentication"
  },"21": {
    "doc": "Basic usage",
    "title": "Render the input controls",
    "content": "The JavaScript approach . InputControls package provides a renderInputControls(v: VisualizeClient, uri: string, container: HTMLElement, config?: InputControlsConfig): void method. Parameters: . | v - The VisualizeClient instance used to interact with Visualize.js API. | uri - The path to a report or an Ad Hoc View (/path/to/my/reports/SalesReport). | container - The DOM element to render input controls to. | config (optional) - The configuration object for the input controls. See configure input controls. | . Return value: . | None. | . Example: . renderInputControls(visualizeClient, reportUri, container, inputControlsConfig) . The React approach . The @jaspersoft/jv-input-controls package provides InputControls React component. Example: . &lt;InputControls v={visualizeClient} uri={reportUri} config={inputControlsConfig} /&gt; . The InputControls component props are similar to renderInputControls parameters explained in the JavaScript approach. ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#render-the-input-controls",
    "relUrl": "/pages/input-controls/basic-usage.html#render-the-input-controls"
  },"22": {
    "doc": "Basic usage",
    "title": "Configure the input controls",
    "content": "The input controls configuration has the following structure: . interface InputControlsConfig { success?: (controls: any) =&gt; void; error?: (error: any) =&gt; void; typeConfig?: InputControlsTypeConfig; events?: { change?: ( ic: { [key: string]: any[] }, validationResult: { [key: string]: string } | boolean, ) =&gt; void; }; params?: { [key: string]: string[] }; } . Members: . | success (optional) - Triggered only once after the input controls are rendered correctly in the HTML container. | error (optional) - Triggered if there is an error while either fetching the input controls or when rendering the input controls in the HTML container. The most common error case is likely to happen when providing an HTML container that is not visible in the HTML tree. | typeConfig (optional) - Defines the styles of the input controls. Structure: { bool?: { type: \"switch\" | \"checkbox\"; }; singleValueText?: { type: \"textField\"; }; singleValueNumber?: { type: \"number\"; }; singleValueDate?: { type: \"default\" | \"material\"; }; singleValueDatetime?: { type: \"default\" | \"material\"; }; singleValueTime?: { type: \"default\" | \"material\"; }; } . See all input controls for more information. | events (optional) - Configures events listeners. See events. | params (optional) - Defines initial values of input controls. See overriding default values. | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#configure-the-input-controls",
    "relUrl": "/pages/input-controls/basic-usage.html#configure-the-input-controls"
  },"23": {
    "doc": "Basic usage",
    "title": "Source code",
    "content": "For a complete example of how to use the input controls, you can check demo input controls project. ",
    "url": "/js-visualize-components-samples/pages/input-controls/basic-usage.html#source-code",
    "relUrl": "/pages/input-controls/basic-usage.html#source-code"
  },"24": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": "| Name | Type | Default | Description | Required | . | server | string | | URI of server where JasperReports Server is hosted. (For example, http://localhost:8080/jasperserver-pro) | Yes | . | contextPath | string | | Context path of JasperReports Server where it is host e.g. /jasperserver-pro | Yes | . | resourceURI | string | | URI of JasperReports Server resource that will be scheduled | Yes | . | stepper | object | | Properties for the stepper. For more details, see Stepper configuration section below. | No | . | tabs | object | | Properties for tabs. For more details, see Tabs configuration section below. | No | . | events | object | {} | Callback function that is called when certain events occur. For more details, see the Events page. | No | . ",
    "url": "/js-visualize-components-samples/pages/scheduler/configuration.html",
    "relUrl": "/pages/scheduler/configuration.html"
  },"25": {
    "doc": "Configuration",
    "title": "Stepper configuration",
    "content": "Default . stepper: { show: true } . Properties . | Name | Type | Default | Description | Required | Supported values | . | show | boolean | true | If true, the stepper will be shown | Yes | true . false . | . ",
    "url": "/js-visualize-components-samples/pages/scheduler/configuration.html#stepper-configuration",
    "relUrl": "/pages/scheduler/configuration.html#stepper-configuration"
  },"26": {
    "doc": "Configuration",
    "title": "Tabs configuration",
    "content": "Default . { \"tabsOrder\": [\"schedule\", \"parameters\", \"notifications\", \"output\"], \"tabsData\": { \"schedule\": { \"label\": { \"showField\": true, \"value\": \"\" }, \"description\": { \"value\": \"\", \"showField\": true }, \"recurrenceInterval\": { \"showField\": true, \"value\": 1 }, \"recurrenceIntervalUnit\": { \"showField\": true, \"value\": \"DAY\" }, \"startTime\": { \"showField\": true, \"value\": \"now\" } }, \"output\": { \"baseOutputFilename\": { \"showField\": true, \"value\": \"\" }, \"outputDescription\": { \"showField\": true, \"value\": \"\" }, \"outputFormat\": { \"showField\": true, \"value\": [\"pdf\"] }, \"outputTimeZone\": { \"showField\": true, \"value\": \"\" } }, \"parameters\": { }, \"notifications\": { \"address\": { \"showField\": true, \"value\": [] }, \"subject\": { \"showField\": true, \"value\": \"\" }, \"messageText\": { \"value\": \"\" }, \"reportAccessType\": { \"showField\": true, \"value\": \"SEND_ATTACHMENT\" } } } } . Properties . | Name | Type | Default | Description | Required | Supported values | . | tabsOrder | Array | [\"schedule\", \"parameters\", \"notifications\", \"output\"] | Order of appearance for the tabs. To hide a tab, leave it out of the array. | No | 'schedule' . 'parameters' . 'notifications' . 'output' . | . | schedule | object | | Properties for the schedule tab. For more information, see Schedule tab configuration section below. | No | | . | parameters | object | | Properties for the parameters tab. | No | | . | notifications | object | | Properties for the notifications tab. For more information, see Notifications tab configuration section below. | No | | . | output | object | | Properties for the output tab. For more information, see Output tab configuration section below. | No | | . Schedule tab configuration . | Name | Type | Default | Description | Required | Supported values | . | label | object | { showField: true, . value: \"\" . } | Visibility and default value of label field | If showField is false, a value is required. | The maximum length of value is 100 characters. | . | description | object | { showField: true, . value: \"\" . } | Visibility and default value of description field | No | The maximum length is 250 characters. | . | recurrenceInterval | object | { showField: true, . value: 1 . } | Visibility and default value of recurrenceInterval field | No | The recurrence interval must be an integer greater than 0. | . | recurrenceIntervalUnit | object | { showField: true, . value: \"DAY\" . } | Visibility and default value of recurrenceIntervalUnit field | No | 'HOUR' . 'DAY' . 'WEEK' . | . | startTime | object | { showField: true, . value: \"now\" . } | Visibility and default value of startTime field | No | The value must be either 'now' or a valid start date and time. If the value is 'now', the 'Now' option will be selected. If the value is a start date and time, it cannot be empty and must be set in the future; in this case, the 'Specific date and time' option will be selected. | . Notifications tab configuration . | Name | Type | Default | Description | Required | Supported values | . | address | object | { showField: true, . value: \"\" . } | Visibility and default value of address field | If showField is false, a value is required. | One or more email addresses should be valid. | . | subject | object | { showField: true, . value: \"\" . } | Visibility and default value of subject field | If showField is false, a value is required. | The maximum length is 100 characters. | . | messageText | object | { showField: true, . value: \"\" . } | Visibility and default value of messageText field | No | The maximum length is 2000 characters. | . | reportAccessType | object | { showField: true, . value: \"SEND_ATTACHMENT\" . } | Visibility and default value of reportAccessType field | No | The value must be either 'SEND_ATTACHMENT' or a valid JasperReports Server folder path. If the value is 'SEND_ATTACHMENT', the option to 'Include report/dashboard file as attachment' will be selected. If the value is a folder path, it must not include any invalid characters, and the option 'Include report/dashboard as repository link' will be selected. | . Output tab configuration . | Name | Type | Default | Description | Required | Supported values | . | baseOutputFilename | object | { showField: true, . value: \"\" . } | Visibility and default value of output file field | No | The maximum length is 200 characters. The output filename should not contains invalid characters. | . | outputDescription | object | { showField: true, . value: \"\" . } | Visibility and default value of output description field | No | | . | outputFormat | object | { showField: true, . value: [\"pdf\"] . } | Visibility and default value of output formats field | No | It should be supported output format by JasperReports Server. | . | outputTimeZone | object | { showField: true, . value: \"\" . } | Visibility and default value of output timezone field | No | It should be supported timezone by JasperReports Server | . ",
    "url": "/js-visualize-components-samples/pages/scheduler/configuration.html#tabs-configuration",
    "relUrl": "/pages/scheduler/configuration.html#tabs-configuration"
  },"27": {
    "doc": "Events",
    "title": "Events",
    "content": "To work with user input, you may provide a callback function which is called when certain events occur. When configuring the scheduler component, you may provide an object in the events property of your configuration object. In read-only scenarios where you do not wish to process user input, you may omit this configuration. events?: { cancelBtnClick?: () =&gt; void, scheduleBtnClick?: () =&gt; void, success?: (isScheduleCreatedSuccessfully: boolean, jobInformation: any) =&gt; void, error: ( error: {[key:string]: string} ) =&gt; void, }; . ",
    "url": "/js-visualize-components-samples/pages/scheduler/events.html",
    "relUrl": "/pages/scheduler/events.html"
  },"28": {
    "doc": "Events",
    "title": "Cancel button click",
    "content": "The user must implement a cancelBtnClick function to handle actions when the Cancel button is clicked in the scheduler control panel. This function is optional. ",
    "url": "/js-visualize-components-samples/pages/scheduler/events.html#cancel-button-click",
    "relUrl": "/pages/scheduler/events.html#cancel-button-click"
  },"29": {
    "doc": "Events",
    "title": "Schedule button click",
    "content": "The user needs to implement a scheduleBtnClick function to handle actions when the Schedule button is clicked in the scheduler control panel. This function will receive two parameters: isScheduleCreatedSuccessfully and jobInformation. | If the job is created successfully: . | isScheduleCreatedSuccessfully will be true. | jobInformation will contain the details of the created job. | . | If the job creation fails: . | isScheduleCreatedSuccessfully will be false. | jobInformation will include the error information. | . | . ",
    "url": "/js-visualize-components-samples/pages/scheduler/events.html#schedule-button-click",
    "relUrl": "/pages/scheduler/events.html#schedule-button-click"
  },"30": {
    "doc": "Events",
    "title": "Success",
    "content": "When Scheduler plugin is successfully rendered, the success function will be called. This function is optional. ",
    "url": "/js-visualize-components-samples/pages/scheduler/events.html#success",
    "relUrl": "/pages/scheduler/events.html#success"
  },"31": {
    "doc": "Events",
    "title": "Error",
    "content": "When Scheduler plugin throws error while rendering, the success function will be called. This function is optional. ",
    "url": "/js-visualize-components-samples/pages/scheduler/events.html#error",
    "relUrl": "/pages/scheduler/events.html#error"
  },"32": {
    "doc": "Events",
    "title": "Handling validations",
    "content": "To handle validations on the developer side, you have to use the events.error method when calling the renderScheduler. This method will return an error parameter that contains all the validations. For example: . renderScheduler( document.getElementById(\"my-container\"), visualizeObj, { events: { success: (isScheduleCreatedSuccessfully: boolean, jobInformation: any) =&gt; { console.log(\"Success\", jobInformation); }, error: (errorObj: {[key:string]: string}) =&gt; { console.log(\"Error\", errorObj); }, cancelBtnClick: () =&gt; { console.log(\"Cancel button is clicked\"); }, scheduleBtnClick: () =&gt; { console.log(\"Create schedule button is clicked\"); }, } } ) . ",
    "url": "/js-visualize-components-samples/pages/scheduler/events.html#handling-validations",
    "relUrl": "/pages/scheduler/events.html#handling-validations"
  },"33": {
    "doc": "Events",
    "title": "Handling errors",
    "content": "To handle errors, you can use the error property when calling the renderScheduler method. This method will return an error object when trying to render the scheduler UI in case of an error. For example: . renderScheduler( document.getElementById(\"my-container\"), visualizeObj, { events: { error: (error: { [key: string]: string }) =&gt; { console.log(\"error =&gt; \", error); } }, } ) . Below are possible scenarios that will return an error object, along with the contents of the associated error object. | Container provided is not found . { \"container.not.found\": \"Root element is not found\" } . | resourceURI is not present in the config object. { \"resource.uri.missing.configuration\": \"resourceURI is required in the configuration\" } . | Server is not present in the config object. { \"server.missing.configuration\": \"server is required in the configuration\" } . | contextPath is not present in the config object. { \"contextPath.missing.configuration\": \"contextPath is required in the configuration\" } . | resourceURI is not found in JasperReports Server or is incorrect. { \"resource.uri.not.found\": \"Resource URI was not found\" } . | User doesn’t have permission to schedule specific resource. { \"resource.access.denied\": \"You don't have permission to schedule this resource\" } . | Schedule tab is hidden and no value is specified for label field in the configuration. { \"label.missing.value.schedule.tab.hidden.configuration\": \"Value for label is required in the configuration when schedule tab is hidden\" } . | Output tab is hidden and no value is specified for baseOutputFilename field in the configuration. { \"baseOutputFilename.hidden.missing.value.output.tab.hidden.configuration\": \"Value for baseOutputFilename is required in the configuration when output tab is hidden\" } . | Notification tab is hidden and no value is specified for address or subject fields in the configuration. { \"address.hidden.missing.value.notification.tab.hidden.configuration\": \"Value for address is required in the configuration when notifications tab is hidden\" } . { \"subject.hidden.missing.value.notification.tab.hidden.configuration\": \"Value for subject is required in the configuration when notifications tab is hidden\" } . | label, address, subject, and/or baseOutputFilename fields are hidden and no values are specified in the configuration. { \"label.hidden.missing.value.configuration\": \"Value for label is required in the configuration when label is hidden\" } . { \"address.hidden.missing.value.configuration\": \"Value for address is required in the configuration when address is hidden\" } . { \"subject.hidden.missing.value.configuration\": \"Value for subject is required in the configuration when subject is hidden\" } . { \"baseOutputFilename.hidden.missing.value.configuration\": \"Value for baseOutputFilename is required in the configuration when baseOutputFilename is hidden\" } . | label value is empty or length is more than 100 characters. { \"label.invalid\": \"Scheduled job name should not be empty.\" } . { \"label.invalid\": \"The scheduled job name is too long. The maximum length is 100 characters.\" } . | description value is more than 100 characters. { \"label.invalid\": \"Scheduled job name should not be empty.\" } . { \"label.invalid\": \"The scheduled job name is too long. The maximum length is 100 characters.\" } . | recurrenceInterval value is empty or is not an integer. { \"error.recurrence\": \"Recurrence interval should not be empty.\" } . { \"error.recurrence.must.be.integer\": \"The recurrence interval must be an integer greater than 0.\" } . | startType value is 2 and startDate is empty, invalid, or past date. { \"error.start.date\": \"Start date and time should not be empty or invalid\" } . { \"error.past.date\": \"Start date and time is in the past. The start date and time must be in the future.\" } . | address value is empty or invalid. { \"error.notifications.email.empty\": \"Email address should not be empty.Please one or more email addresses.\" } . { \"error.email.address\": \"One or more email addresses are invalid.\" } . | subject value is empty or length exceeds 100 characters. { \"error.enter.subject\": \"Subject should not be empty.\" } . { \"error.subject.too.long\": \"The subject is too long.\" } . | messageText value length exceeds 2000 characters. { \"error.message.too.long\": \"The message is too long.\" } . | baseOutputFilename value is empty, exceeds 200 characters, or is otherwise invalid. { \"error.file.name\": \"File name should not be empty.\" } . { \"error.file.name.too.long\": \"The file name is too long. It must be 200 characters or less.\" } . { \"error.invalid.file.name\": \"The base output name contains invalid characters. You might have mistyped it.\" } . | outputFormat value is empty. { \"error.output.format\": \"Formats should not be empty\" } . | folderURI value is empty or user does not have proper permissions. { \"error.output.format\": \"Formats should not be empty\" } . { \"error.report.schedule.output.folder.notwriteable\": \"The scheduled job output folder has restricted access.\" } . | . ",
    "url": "/js-visualize-components-samples/pages/scheduler/events.html#handling-errors",
    "relUrl": "/pages/scheduler/events.html#handling-errors"
  },"34": {
    "doc": "Events",
    "title": "Events",
    "content": "To work with user input, you may provide a callback function that is called when certain events occur. Currently we only support change event. When configuring the Input Controls component, you may provide a JSON object in the events property of your configuration object. See Input Controls for more information on configuring the Input Controls component. In read-only scenarios where you do not wish to process user input, you can omit this configuration. events?: { change?: ( ic: { [key: string]: any[] }, validationResult: { [key: string]: string } | boolean, ) =&gt; void; }; . ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html",
    "relUrl": "/pages/input-controls/events.html"
  },"35": {
    "doc": "Events",
    "title": "Parameters",
    "content": "The events.change property accepts a callback that is given the following parameters when called: . | ic - contains a representation of all the input controls that are being rendered in the HTML element container. The format of the object matches the format used by Visualize.js when working with input controls. Keys are input control IDs and values are an array of values. For example: { \"column_boolean_1\": [false], \"column_string_1\": [\"string value\"], \"column_date_1\": [\"2009-09-12\"], \"column_time_1\": [\"23:44:21\"], \"column_timestamp_1\": [\"2014-09-12T15:46:18\"], \"id_1\": [\"1\"], \"column_float_1\": [\"0.33\"] } . | validationResult - contains any validation errors that may be present. The keys of this object represent the input control IDs while the value will either be an empty array when no validation errors occur, or a string value with a user-readable message regarding the validation failure. When all controls have valid input, this parameter will be a boolean value: false. For example: { \"column_time_1\": [], \"column_timestamp_1\": \"Verify the date is before or exactly 2014-09-11T15:00:00.\", } . | . Important notes . | When all values for all input controls are valid, the param validationResult will be a boolean value false. | This event is being triggered by the InputControl class because the InputControl class is a controlled component. The InputControl class will handle the state of the input controls and will update the state of the input controls when the user interacts with them. This is why the InputControl class will trigger the change event every time the state of the input controls changes. | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html#parameters",
    "relUrl": "/pages/input-controls/events.html#parameters"
  },"36": {
    "doc": "Events",
    "title": "Handling validations",
    "content": "To handle validations on the developer side, provide the events.change callback method when calling the renderInputControls. This method will return a second parameter that contains all validations. For example: . renderInputControls( visualizeClient, '/My/URI', document.getElementById(\"my-container\"), { events: { change: (ics, validationResult) =&gt; { console.log(\"ics =&gt; \", ics); console.log(\"validationResult =&gt; \", validationResult); } } } ) . What to expect in case the input control is invalid . For every change that happens in the input control, the events.change method will be executed. Suppose you have defined a mandatory text input control. This means the input control must have a value. Let’s assume the user has not entered any value in the input control. In this case, the validationResult will contain: . {\"id_1\": \"Specify a valid value for type number.\"} . where: . | “id_1”: is the id of the input control | “Specify a valid value for type number.” is the message that is displayed in the UI. | . When all values for all input controls are valid, the validationResult parameter will be a boolean value false. ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html#handling-validations",
    "relUrl": "/pages/input-controls/events.html#handling-validations"
  },"37": {
    "doc": "Events",
    "title": "Handling errors",
    "content": "Use the error property when calling the renderInputControls method. When there is an error, this method will be called with an error object as a parameter. For example: . renderInputControls( vContainer.v, '/My/URI', document.getElementById(\"my-container\"), { error: (error) =&gt; { console.log(\"error =&gt; \", error); } } ) . When the container provided is not visible . A possible situation is when the container provided is not visible. In this case, the error object will contain: . { \"message\": \"createRoot(...): Target container is not a DOM element\" } . When the report URL is not found in the JasperReports Server. Another possible situation is when the report URL is not found in the JasperReports Server. In this case, the error object will contain: . { \"message\": \"Resource URI:&lt;URI_of_the_report&gt; Type:com.jaspersoft.jasperserver.api.metadata.common.domain.InputControlsContainer not found.\", \"errorCode\": \"resource.not.found\", \"parameters\": [ \"URI:&lt;URI_of_the_report&gt; Type:com.jaspersoft.jasperserver.api.metadata.common.domain.InputControlsContainer\" ] } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/events.html#handling-errors",
    "relUrl": "/pages/input-controls/events.html#handling-errors"
  },"38": {
    "doc": "Scheduler",
    "title": "Scheduler",
    "content": "The Scheduler plugin is a set of components that allows you to render the JasperReports Server scheduler UI in your web application. The plugin is built on top of the Visualize.js API and is used to interact with JasperReport Server visualizations and reports. ",
    "url": "/js-visualize-components-samples/pages/scheduler/",
    "relUrl": "/pages/scheduler/"
  },"39": {
    "doc": "Home",
    "title": "JaspersoftVisualize Components",
    "content": "Enhance your web application with JasperReports Server&#xae;, embed reports, or build custom workflows using modern React components. Get started Modern . Built with TypeScript, Vite, React, and Material UI, our Visualize Components are designed to operate in any web development environment and integrate seamlessly into your Visualize.js projects. Configurable . We've designed the Visualize Components with flexibility in mind. You can extend and customize them to match your application's unique style and requirements. Accessible . Visualize Components come with built-in keyboard navigation and screen reader support, saving you valuable development time and ensuring your projects are inclusive from the start. Open Source . Our components are completely free, giving you the power to bring your applications to life without any restrictions. You have the full freedom to use, customize, and even redistribute it within your own projects. ",
    "url": "/js-visualize-components-samples/",
    "relUrl": "/"
  },"40": {
    "doc": "Home",
    "title": "Components",
    "content": "Input Controls . Easily add interactive filters, date pickers, and other input controls to your web applications. This plugin streamlines the integration of JasperReports Server reports and visualizations, giving users greater control over their data exploration. Get started Scheduler . This powerful component allows users to schedule reports and dashboards with ease. Built on the Visualize.js API, the scheduler integrates seamlessly with JasperReports Server. Get started ",
    "url": "/js-visualize-components-samples/",
    "relUrl": "/"
  },"41": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/js-visualize-components-samples/",
    "relUrl": "/"
  },"42": {
    "doc": "Input Controls",
    "title": "Input Controls",
    "content": "The Input Controls component allows you to render input controls in your web application. The component is built on top of the Visualize.js API and is used to interact with JasperReport Server reports and visualizations. ",
    "url": "/js-visualize-components-samples/pages/input-controls/",
    "relUrl": "/pages/input-controls/"
  },"43": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "Jaspersoft Visualize Components is a toolkit of React components that work together with Visualize.js to provide web developers rich, modern UI components that interact with their existing JasperReports Server® installation. Web developers can forge their own user experience with these components by using the reporting concepts found in JasperReports Server. ",
    "url": "/js-visualize-components-samples/pages/introduction.html",
    "relUrl": "/pages/introduction.html"
  },"44": {
    "doc": "Introduction",
    "title": "About Visualize Components",
    "content": "This project provides modern components that are ready-to-use, customizable, and have accessibility built right in. Integrate these packages into your current React project, or use them with any other framework. ",
    "url": "/js-visualize-components-samples/pages/introduction.html#about-visualize-components",
    "relUrl": "/pages/introduction.html#about-visualize-components"
  },"45": {
    "doc": "Introduction",
    "title": "Requirements",
    "content": "You will need access to a running instance of JasperReports Server 8.0 or newer that is configured to provide Visualize.js. ",
    "url": "/js-visualize-components-samples/pages/introduction.html#requirements",
    "relUrl": "/pages/introduction.html#requirements"
  },"46": {
    "doc": "Introduction",
    "title": "Installation",
    "content": "Installation of packages can be done with either npm or yarn, as you see fit for your project. Packages are hosted on the public npm registry, and should be available without any additional configurations. Packages are organized under the @jaspersoft scope. npm . &gt; npm install --save @jaspersoft/jv-input-controls @jaspersoft/jv-tools @jaspersoft/jv-ui-components . yarn . &gt; yarn add @jaspersoft/jv-input-controls @jaspersoft/jv-tools @jaspersoft/jv-ui-components . ",
    "url": "/js-visualize-components-samples/pages/introduction.html#installation",
    "relUrl": "/pages/introduction.html#installation"
  },"47": {
    "doc": "Introduction",
    "title": "Getting Started",
    "content": "You need to have access to Visualize.js on the pages where these components will be used. To do this you can include it using a script tag or utilize the jv-tools package to load the script programmatically. More info about this can be found here: Loading Visualize.js. ",
    "url": "/js-visualize-components-samples/pages/introduction.html#getting-started",
    "relUrl": "/pages/introduction.html#getting-started"
  },"48": {
    "doc": "Tools",
    "title": "Tools",
    "content": "The tools package is a collection of utility functions for working with the components. Currently this is the home of two important pieces: . | a loader of Visualize.js | TypeScript interfaces for working with Visualize.js in your IDE (work in progress) | . ",
    "url": "/js-visualize-components-samples/pages/tools/jv-tools.html",
    "relUrl": "/pages/tools/jv-tools.html"
  },"49": {
    "doc": "Tools",
    "title": "Installation",
    "content": "Installing the tools package can be done with your package tool: . npm npm install @jaspersoft/jv-tools . yarn yarn add @jaspersoft/jv-tools . ",
    "url": "/js-visualize-components-samples/pages/tools/jv-tools.html#installation",
    "relUrl": "/pages/tools/jv-tools.html#installation"
  },"50": {
    "doc": "Loading Visualize.js",
    "title": "Loading Visualize.js",
    "content": " ",
    "url": "/js-visualize-components-samples/pages/tools/loading-vizjs.html",
    "relUrl": "/pages/tools/loading-vizjs.html"
  },"51": {
    "doc": "Loading Visualize.js",
    "title": "Visualize.js loader",
    "content": "The main utility you will use from the tools is the visualizeJsLoader function. This function allows you to load Visualize.js from a provided URL. It will then create a script tag to load the script, making it available to work with in code. You can optionally maintain loading of Visualize.js on your own (for example, using script tag), and allow it to be set on the global scope. If this is done, visualizeJsLoader will return VisualizeFactory function from global scope instead of loading Visualize.js script again. ",
    "url": "/js-visualize-components-samples/pages/tools/loading-vizjs.html#visualizejs-loader",
    "relUrl": "/pages/tools/loading-vizjs.html#visualizejs-loader"
  },"52": {
    "doc": "Loading Visualize.js",
    "title": "Authentication",
    "content": "To work with your JasperReports Server instance via Visualize.js API you need to authenticate with it using VisualizeFactory function and get VisualizeClient instance. There are different ways to authenticate with JasperReports Server: . | organization, username, and password | token | custom login and logout functions | . You should use Authentication object to provide credentials or custom authentication functions: . type Authentication = { url?: string; name?: string; password?: string; organization?: string | null; locale?: string; timezone?: string; token?: string; preAuth?: boolean; tokenName?: string; loginFn?: () =&gt; void; logoutFn?: () =&gt; void; } . Sample of authentication in React application . In the following sample we will use the useEffect hook to load Visualize.js, authenticate with the JasperReports Server and store VisualizeClient instance in vContainer as v property: . const myAuth: Authentication = { name: \"joeuser\", password: \"joeuser\", organization: \"organization_1\", locale: \"en_US\" }; const [vContainer, setVContainer] = useState( null as { v: VisualizeClient } | null, ); useEffect(() =&gt; { const loadVisualize = visualizejsLoader(visualizeUrl); console.log(\"Loading Visualize.js...\"); loadVisualize() .then((visualizeFactory: VisualizeFactory) =&gt; { // Connecting to JRS. console.log(\"Visualize.js loaded. Connecting to JasperReports Server...\"); visualizeFactory( { auth: myAuth }, (v: VisualizeClient) =&gt; { console.log(\"Visualize client connected.\"); setVContainer({ v }); }, (e: any) =&gt; { console.log(\"Error connecting to JasperReports Server.\"); console.log(String(e)); }, ); }) .catch((error: Error) =&gt; { console.log(\"Error loading visualize.js: \", error); }); }, []); . And now we will render input controls using VisualizeClient instance and renderInputControls function: . useEffect(() =&gt; { if (!vContainer || !vContainer.v) { return; } renderInputControls( vContainer.v, reportUri, document.getElementById(\"input-controls-container\") as HTMLElement, { success: () =&gt; { console.log(\"Input controls rendered successfully\"); }, error: (error) =&gt; { console.log(\"Error rendering input controls: \", error); }, typeConfig: { bool: { type: \"switch\" }, }, events: { change: (ics, validationResult) =&gt; { console.log(\"validationResult =&gt; \", validationResult); console.log(\"ics =&gt; \", ics); }, }, }, ); }, [vContainer]); . ",
    "url": "/js-visualize-components-samples/pages/tools/loading-vizjs.html#authentication",
    "relUrl": "/pages/tools/loading-vizjs.html#authentication"
  },"53": {
    "doc": "Override default styles",
    "title": "Override default styles",
    "content": "All input controls are shipped with default styles. These default styles are applied to the input controls when they are rendered in the HTML element container. To prevent any conflicts with your application’s styles, the input control styles have been scoped to the input control container only by using the prefix jv- on all CSS classnames. ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html",
    "relUrl": "/pages/input-controls/override-styles.html"
  },"54": {
    "doc": "Override default styles",
    "title": "The default styles",
    "content": "The package @jaspersoft/jv-ui-components provides a stylesheet that contains the default styles for the input controls. This file can be located at the following path: @jaspersoft/jv-ui-components/dist/jv-ui.css. It is imported in the sample application’s index.css and App.tsx files as follows: . @import \"@jaspersoft/jv-ui-components/dist/jv-ui.css\"; . Optionally, there is a configuration that enables you to use the default styles for the input controls components only. When this configuration is used, the other styles in your application will not be affected by the Visualize Components CSS: . import \"@jaspersoft/jv-ui-components/material-ui/JVMuiClassNameSetup\"; . You can choose not to import them at all, or you can import them and override the styles as needed. ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html#the-default-styles",
    "relUrl": "/pages/input-controls/override-styles.html#the-default-styles"
  },"55": {
    "doc": "Override default styles",
    "title": "How to overwrite the default styles",
    "content": "The following code is rendered when using a checkbox component for a boolean input control: . &lt;div class=\"jv-mInput jv-mInputSwitch jv-mInputInline jv-mInputLarge mui\"&gt; &lt;label class=\"jv-MuiFormControlLabel-root jv-MuiFormControlLabel-labelPlacementEnd\"&gt; &lt;span class=\"jv-MuiSwitch-root jv-MuiSwitch-sizeMedium jv-mInput-switch mui\"&gt; &lt;span class=\"jv-PrivateSwitchBase-root jv-MuiSwitch-switchBase jv-MuiSwitch-colorPrimary Mui-checked\"&gt; &lt;input class=\"jv-PrivateSwitchBase-input jv-MuiSwitch-input\" type=\"checkbox\" checked=\"\"&gt; &lt;span class=\"jv-MuiSwitch-thumb\"&gt;&lt;/span&gt; &lt;span class=\"jv-MuiTouchRipple-root\"&gt;&lt;/span&gt; &lt;/span&gt; &lt;span class=\"jv-MuiSwitch-track\"&gt;&lt;/span&gt; &lt;/span&gt; &lt;span class=\"jv-MuiTypography-root jv-MuiFormControlLabel-label jv-mInput-label mui\"&gt;column_boolean&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; . This checkbox component references the CSS rule .jv-MuiSwitch-colorPrimary.Mui-checked + .jv-MuiSwitch-track, which is used to apply the background color of the switch when it is checked. To override this style, you can add your own custom CSS to your application. For example, the following rule will make the background color of the switch red when it is checked.: .jv-MuiSwitch-colorPrimary.Mui-checked + .jv-MuiSwitch-track { background-color: red; } . ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html#how-to-overwrite-the-default-styles",
    "relUrl": "/pages/input-controls/override-styles.html#how-to-overwrite-the-default-styles"
  },"56": {
    "doc": "Override default styles",
    "title": "About the default styles",
    "content": "All Jaspersoft Visualize Components are based on Material UI v5 components. (Check the list of all available input controls here). However, we created our own CSS file that overrides the default Material UI styles, giving all components the look and feel of Jaspersoft. As a result, you will not get the exact same look and feel as out-of-the-box Material UI components. Instead, you get a version of those components with styling of our own. ",
    "url": "/js-visualize-components-samples/pages/input-controls/override-styles.html#about-the-default-styles",
    "relUrl": "/pages/input-controls/override-styles.html#about-the-default-styles"
  },"57": {
    "doc": "Override default styles",
    "title": "Override default styles",
    "content": "The scheduler is shipped with default styles. These default styles are applied to the scheduler when they are rendered in the HTML element container. To prevent any conflicts with your application’s styles, the scheduler styles have been scoped to the scheduler container only by using the prefix jv- on all CSS classnames. ",
    "url": "/js-visualize-components-samples/pages/scheduler/override-styles.html",
    "relUrl": "/pages/scheduler/override-styles.html"
  },"58": {
    "doc": "Override default styles",
    "title": "The default styles",
    "content": "The package @jaspersoft/jv-ui-components provides a stylesheet that contains the default styles for the scheduler. This file can be located in the following path: @jaspersoft/jv-ui-components/dist/jv-ui.css. It is imported in the sample application’s index.css and App.tsx files as follows: . import \"@jaspersoft/jv-ui-components/dist/jv-ui.css\"; import \"@jaspersoft/jv-ui-components/material-ui/JVMuiClassNameSetup\"; . Note: The second import is to configure the styles to be applied only to the scheduler UI components. You can choose not to import them at all, or you can import them and override the styles as needed. ",
    "url": "/js-visualize-components-samples/pages/scheduler/override-styles.html#the-default-styles",
    "relUrl": "/pages/scheduler/override-styles.html#the-default-styles"
  },"59": {
    "doc": "Override default styles",
    "title": "How to overwrite the default styles",
    "content": "The following code is rendered for Create schedule button in the scheduler: . &lt;button class=\"jv-MuiButtonBase-root jv-MuiButton-root jv-MuiButton-contained jv-MuiButton-containedPrimary jv-MuiButton-sizeMedium jv-MuiButton-containedSizeMedium jv-MuiButton-disableElevation jv-MuiButton-root jv-MuiButton-contained jv-MuiButton-containedPrimary jv-MuiButton-sizeMedium jv-MuiButton-containedSizeMedium jv-MuiButton-disableElevation jv-mButton jv-mButtonPrimary mui css-zddlty-MuiButtonBase-root-MuiButton-root\" tabindex=\"0\" type=\"button\"&gt; &lt;span class=\"jv-MuiButton-label jv-mButton-label mui \"&gt;Create schedule&lt;/span&gt; &lt;span class=\"jv-MuiTouchRipple-root css-8je8zh-MuiTouchRipple-root\"&gt;&lt;/span&gt; &lt;/button&gt; . This button references the CSS rule: .jv-mButtonPrimary.jv-MuiButton-contained.mui, which applies the background color of the button. To override this style, you can add your own custom CSS to your application. For example, the following rule will make the background color of the button red: .jv-mButtonPrimary.jv-MuiButton-contained.mui { background-color: red; } . ",
    "url": "/js-visualize-components-samples/pages/scheduler/override-styles.html#how-to-overwrite-the-default-styles",
    "relUrl": "/pages/scheduler/override-styles.html#how-to-overwrite-the-default-styles"
  },"60": {
    "doc": "Override default styles",
    "title": "About the default styles",
    "content": "All Jaspersoft Visualize Components are based on Material UI v5 components. (Check the list of all available input controls here). However, we created our own CSS file that overrides the default Material UI styles, giving all components the look and feel of Jaspersoft. As a result, you will not get the exact same look and feel as out-of-the-box Material UI components. Instead, you get a version of those components with styling of our own. ",
    "url": "/js-visualize-components-samples/pages/scheduler/override-styles.html#about-the-default-styles",
    "relUrl": "/pages/scheduler/override-styles.html#about-the-default-styles"
  },"61": {
    "doc": "Override default values",
    "title": "Override default values",
    "content": "This document explains how to override the default values of input controls with your own predefined values. By default, input controls display initial values fetched from the server. However, you can use the params property to specify different initial values. How to use the params property . | Create a JSON objectIn your input controls configuration, add a params property containing a JSON object. | Define input control IDs and valuesEach key in the JSON object should match the ID of an input control. The corresponding value should be an array of values you want to set as the initial value for that input control. params: { column_boolean_1: [\"false\"], column_string_1: [ \"This is a predefined text different than the stored in the server\", ], column_date_1: [\"2009-03-02\"], column_timestamp_1: [\"2014-03-02T10:00:00\"], column_time_1: [\"14:00:00\"], ProductFamily: [\"Drink\", \"Food\"], } . | . Important notes . | Multi-select controls Only multi-select input controls (like ProductFamily in the example) accept multiple values in the array. | Single-value controlsFor all other input control types, only the first value in the array will be used as the initial value. | Non-existent IDsIf you provide an ID that doesn’t match any input control, it will simply be ignored. No errors will be thrown. | Optional propertyThe params property is optional. If you don’t provide it, the input controls will display the initial values fetched from the server. | . ",
    "url": "/js-visualize-components-samples/pages/input-controls/params.html",
    "relUrl": "/pages/input-controls/params.html"
  },"62": {
    "doc": "Visualize.js types in TypeScript",
    "title": "Visualize.js types in TypeScript",
    "content": "The tools package also exports some types that can be used while writing TypeScript. This is currently under development, but some types are available for use now. ",
    "url": "/js-visualize-components-samples/pages/tools/visualize-types.html",
    "relUrl": "/pages/tools/visualize-types.html"
  },"63": {
    "doc": "Visualize.js types in TypeScript",
    "title": "Using types in your project",
    "content": "The types are exported in the tools package, and should be available in your IDE once you’ve added @jaspersoft/jv-tools as a dependency to your project. ",
    "url": "/js-visualize-components-samples/pages/tools/visualize-types.html#using-types-in-your-project",
    "relUrl": "/pages/tools/visualize-types.html#using-types-in-your-project"
  }
}
